{
  "version": "1013001",
  "info": {
    "hostAppName": "Splice Standalone",
    "hostAppVersion": "1.0"
  },
  "nodes": [
    {
      "name": "DGNode",
      "dependencies": {},
      "bindings": [
        {
          "operator": {
            "name": "paintingOp",
            "entry": "paintingOp",
            "filename": "paintingOp.kl",
            "kl": "require Math;\nrequire InlineDrawing;\nrequire Geometry;\nrequire Oculus;\nrequire RazerHydra;\nrequire FileIO;\nrequire AlembicWrapper;\n\nobject RunTimeData {\n\n  SInt32 setupStep;\n  InlineMaterial paintMat;\n  Index paintColorIndex;\n  SInt32 paintBUttons;\n  Xfo razorOffset;\n  Vec3 razorCenter;\n  SInt32 grabState;\n  Xfo grabOffset;\n  InlineInstance grabInstance;\n  InlineDebugShape grabLasso;\n};\n\noperator paintingOp(\n  Scalar turnSpeed, \n  Scalar walkSpeed, \n  in FilePath fileName, \n  in Color background, \n  in Boolean stereo, \n  io ovrDevice or, \n  io ovrViewportCallback oculusCallback, \n  io RazerHydraViewportCallback razerCallback, \n  io DrawingHandle handle,\n  io InlineInstance tools[],\n  io InlineInstance meshes[],\n  io Object runtimeData\n) {\n\n  // initialize runtime data\n  if(!runtimeData)\n    runtimeData = RunTimeData();\n  RunTimeData rtd = runtimeData;\n\n  // setup the rendering callbacks\n  if(!or.isConfigured()) {\n    or.configureTracking();\n    oculusCallback = ovrViewportCallback(or);\n    oculusCallback.registerForViewport();\n    razerCallback = RazerHydraViewportCallback();\n    razerCallback.registerForViewport();\n  }\n  \n  // import the tools asset if required\n  if(tools.size() == 0) {\n    SpliceStandaloneViewport vp = Singleton_get('Viewport');\n    if(vp) {\n      if(vp.filePaths.size()) {\n        FilePath path(vp.filePaths[0]);\n        FilePath toolsPath = path.parentPath() / 'assets' / 'tools.abc';\n        if(toolsPath.exists()) {\n      \n          InlineShader shader = handle.getDrawing().registerShader(OGLSurfaceShader());\n          InlineMaterial mat = shader.getOrCreateMaterial('grab_tool');\n          rtd.paintMat = shader.getOrCreateMaterial('paint_tool');\n          mat.setUniform('u_diffuseColor', Color(0.95, 0.95, 0.95));\n          rtd.paintMat.setUniform('u_diffuseColor', Color(0.95, 0.0, 0.0));\n  \n  \n          AlembicArchiveReader archive(toolsPath.string());\n          String shapePaths[] = archive.getPathsOfType('PolyMesh');\n          report(shapePaths);\n          for(Size i=0;i<shapePaths.size();i++) {\n            String shapePath = shapePaths[i];\n            String parts[] = shapePath.reversePartition('/');\n  \n            AlembicPolyMeshReader reader = archive.getPolyMesh(shapePath);\n        \n            PolygonMesh mesh = PolygonMesh();\n            reader.readSample(0.0, mesh);\n        \n            InlineTransform transform = StaticInlineTransform(parts[2], handle.getRootTransform(), Xfo());\n            InlineMeshShape shape(parts[2], mesh);\n            InlineInstance instance = SimpleInlineInstance(parts[2], transform, shape);\n            \n            if(i == 0)\n              instance.addMaterial(mat);\n            else\n              instance.addMaterial(rtd.paintMat);\n            tools.push(instance);\n          }\n        }\n      }\n    }\n  }\n  \n  // import the alembic asset if required\n  if(meshes.size() == 0 && !fileName.isEmpty()) {\n  \n    AlembicArchiveReader archive(fileName.string());\n    String xfoPaths[] = archive.getPathsOfType('Xform');\n    String shapePaths[] = archive.getPathsOfType('PolyMesh');\n    \n    InlineShader shader = handle.getDrawing().registerShader(OGLSurfaceShader());\n    \n    InlineTransform xfoLookup[String];\n    InlineShape shapeLookup[String];\n    InlineInstance instanceLookup[String];\n    \n    for(Size i=0;i<xfoPaths.size();i++) {\n      String xfoPath = xfoPaths[i];\n      String parts[] = xfoPath.reversePartition('/');\n\n      InlineTransform parentTransform = handle.getRootTransform();\n      if(parts[0] != \"\")\n        parentTransform = xfoLookup[parts[0]];\n\n      AlembicXformReader reader = archive.getXform(xfoPath);\n      Xfo xfo = reader.readSample(0.0);        \n      InlineTransform transform = StaticInlineTransform(parts[2], parentTransform, xfo);\n      xfoLookup[xfoPath] = transform;\n    }\n    \n    for(Size i=0;i<shapePaths.size();i++) {\n      String shapePath = shapePaths[i];\n      String parts[] = shapePath.reversePartition('/');\n\n      AlembicPolyMeshReader reader = archive.getPolyMesh(shapePath);\n      \n      PolygonMesh mesh = PolygonMesh();\n      reader.readSample(0.0, mesh);\n      \n      InlineTransform transform = xfoLookup[parts[0]];\n      InlineMeshShape shape(parts[2], mesh);\n      InlineInstance instance = SimpleInlineInstance(parts[2], transform, shape);\n      \n      shapeLookup[shapePath] = shape;\n      instanceLookup[shapePath] = instance;\n    }\n\n    Color color(0.6, 0.6, 0.6);\n    for(path in instanceLookup) {\n      InlineMaterial mat = shader.getOrCreateMaterial(path);\n      mat.setUniform('u_diffuseColor', color);\n      InlineInstance instance = instanceLookup[path];\n      InlineEntity entity = instance;\n      mat.addInstance(instance);\n      meshes.push(instance);\n    }\n \n  }\n  \n  // update the oculus rift and background rendering\n  or.setStereoEnabled(stereo);\n  oculusCallback.bgColor = background;\n  \n  // perform reprojection of the tools\n  if(tools.size() > 0) {\n\n    Xfo baseXfo;\n    baseXfo.tr = oculusCallback.walkOffset;\n    baseXfo.ori.setFromAxisAndAngle(Vec3(0, 1, 0), HALF_PI);\n    baseXfo.ori = baseXfo.ori * oculusCallback.turnOffset;\n  \n    if(razerCallback.controller.controls[0].buttons & SIXENSE_BUTTON_START && \n      razerCallback.controller.controls[1].buttons & SIXENSE_BUTTON_START) {\n    \n      Vec3 pos0 = razerCallback.controller.controls[0].pos;\n      Vec3 pos1 = razerCallback.controller.controls[1].pos;\n      rtd.razorCenter = (pos0 + pos1) * 0.5;\n      \n      rtd.razorOffset = baseXfo.inverse() * oculusCallback.worldXfo;\n      oculusCallback.device.recenterPose();\n    }\n\n    for(Size i=0;i<tools.size();i++) {\n      Vec3 pos = razerCallback.controller.controls[i].pos;\n      pos -= rtd.razorCenter;\n      Quat ori = razerCallback.controller.controls[i].rot_quat;\n      Quat offsetOri;\n      offsetOri.setFromAxisAndAngle(Vec3(0, 1, 0), PI);\n\n      Xfo xfo;\n      xfo.tr = pos * 0.01;\n      xfo.ori = ori * offsetOri;\n      xfo.sc *= 0.5;\n      \n      xfo = baseXfo * rtd.razorOffset * xfo;\n      \n      InlineTransform transform = tools[i].getTransform();\n      transform.setGlobalXfo(0, xfo);\n    }\n    \n    // grab functionality\n    if(razerCallback.controller.controls[0].trigger > 0.001) {\n\n      if(!rtd.grabLasso) {\n        InlineShader shader = handle.getDrawing().registerShader(OGLFlatShader());\n        InlineMaterial mat = shader.getOrCreateMaterial('lasso_tool');\n        mat.setUniform('u_color', Color(0.0, 0.0, 1.0));\n        rtd.grabLasso = InlineDebugShape('lasso');\n        rtd.grabLasso.drawLine(Vec3(0.0, 0.0, 2.0), Vec3(0.0, 0.0, 0.0));\n        InlineInstance instance = SimpleInlineInstance('lasso', tools[0].getTransform(), rtd.grabLasso);\n        instance.addMaterial(mat);\n      }\n\n      GeometryAttributes attributes = rtd.grabLasso.attributes;\n      Vec3Attribute positions = attributes.getAttribute('positions');\n      Xfo toolXfo = tools[0].getTransform().getGlobalXfo(0);\n      \n      if(rtd.grabState < 2) {\n        rtd.grabState = 1; // trying to grab\n  \n        Ray globalRay;\n        globalRay.start = toolXfo.tr;\n        globalRay.direction = toolXfo.ori.getZaxis();\n  \n        positions.values[1] = globalRay.start + globalRay.direction * 50;\n        positions.values[1] = toolXfo.inverse().transformVector(positions.values[1]);\n        positions.values[1] *= razerCallback.controller.controls[0].trigger;\n        \n        InlineInstance closestInstance = null;\n        Scalar closestDistance = 100000.0;\n        for(Size i=0;i<meshes.size();i++) {\n          PolygonMesh mesh = InlineMeshShape(meshes[i].getShape()).getMesh();\n          InlineTransform transform = meshes[i].getTransform();\n          Xfo xfo = transform.getGlobalXfo(0);\n          Ray ray = xfo.inverse().transformRay(globalRay);\n          \n          GeometryLocation location = mesh.raycast(ray, true, 0, SCALAR_INFINITE);\n          if(location.isValid()) {\n            Vec3 pos = mesh.getPositionAtLocation(location);\n            pos = xfo.transformVector(pos);\n            Scalar distance = (globalRay.start - pos).lengthSquared();\n            if(distance < closestDistance) {\n              closestDistance = distance;\n              closestInstance = meshes[i];\n              positions.values[1] = toolXfo.inverseTransformVector(pos);\n            }\n          }\n        }\n        \n        rtd.grabInstance = closestInstance;\n        \n        if(rtd.grabInstance != null) {\n            \n          if(rtd.grabState < 2) {\n            Xfo meshXfo = rtd.grabInstance.getTransform().getGlobalXfo(0);\n            rtd.grabOffset = toolXfo.inverse() * meshXfo;\n          }\n\n          if(razerCallback.controller.controls[0].trigger > 0.95)\n            rtd.grabState = 2;\n        }\n\n          \n      } else {\n      \n        InlineTransform transform = rtd.grabInstance.getTransform();\n        Xfo xfo = toolXfo * rtd.grabOffset;\n        transform.setGlobalXfo(0, xfo);\n      \n      }\n\n      positions.incrementVersion();\n\n    } else if(rtd.grabState > 0) {\n      GeometryAttributes attributes = rtd.grabLasso.attributes;\n      Vec3Attribute positions = attributes.getAttribute('positions');\n      positions.values[1] = Vec3(0.0, 0.0, 0.0);\n      positions.incrementVersion();\n      rtd.grabState = 0;\n    }\n  }\n  \n  if(razerCallback.controller.controls[1].buttons != rtd.paintBUttons) {\n    if(razerCallback.controller.controls[1].buttons & SIXENSE_BUTTON_1) {\n      Color colors[6];\n      colors[0] = Color(1.0, 0.0, 0.0);\n      colors[1] = Color(0.0, 1.0, 0.0);\n      colors[2] = Color(0.0, 0.0, 1.0);\n      colors[3] = Color(1.0, 1.0, 0.0);\n      colors[4] = Color(1.0, 0.0, 1.0);\n      colors[5] = Color(0.0, 1.0, 1.0);\n      \n      rtd.paintColorIndex = (rtd.paintColorIndex+1) % colors.size();\n      \n      rtd.paintMat.setUniform('u_diffuseColor', colors[rtd.paintColorIndex]);\n    }\n    rtd.paintBUttons = razerCallback.controller.controls[1].buttons;\n  }\n  \n  if(razerCallback.controller.controls[1].trigger > 0.25) {\n    if(rtd.grabInstance) {\n      InlineMaterial mat = rtd.grabInstance.getMaterial(0);\n      Color color = rtd.paintMat.getUniform('u_diffuseColor').getColor();\n      mat.setUniform('u_diffuseColor', color);\n    }\n  }\n}\n",
            "portmap": {}
          }
        }
      ]
    }
  ],
  "extensions": [
    "Oculus",
    "RazerHydra"
  ],
  "ports": [
    {
      "name": "background",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "Color",
      "autoInitObjects": true,
      "member": "background",
      "mode": "io",
      "persistence": true,
      "default": "{\"r\":1,\"g\":1,\"b\":1,\"a\":0}"
    },
    {
      "name": "fileName",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "FilePath",
      "autoInitObjects": true,
      "member": "fileName",
      "mode": "in",
      "persistence": true
    },
    {
      "name": "handle",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "DrawingHandle",
      "autoInitObjects": true,
      "member": "handle",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "meshes",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "InlineInstance[]",
      "autoInitObjects": true,
      "member": "meshes",
      "mode": "in",
      "persistence": false
    },
    {
      "name": "oculusCallback",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "ovrViewportCallback",
      "autoInitObjects": false,
      "member": "oculusCallback",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "or",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "ovrDevice",
      "autoInitObjects": true,
      "member": "or",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "razerCallback",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "RazerHydraViewportCallback",
      "autoInitObjects": false,
      "member": "razerCallback",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "result",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "Vec3",
      "autoInitObjects": true,
      "member": "result",
      "mode": "out",
      "persistence": true,
      "default": "{\"x\":0,\"y\":0,\"z\":0}"
    },
    {
      "name": "runtimeData",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "Object",
      "autoInitObjects": false,
      "member": "runtimeData",
      "mode": "in",
      "persistence": false
    },
    {
      "name": "stereo",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "Boolean",
      "autoInitObjects": true,
      "member": "stereo",
      "mode": "in",
      "persistence": true,
      "default": "true"
    },
    {
      "name": "time",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "time",
      "mode": "in",
      "persistence": false
    },
    {
      "name": "tools",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "InlineInstance[]",
      "autoInitObjects": true,
      "member": "tools",
      "mode": "in",
      "persistence": false
    },
    {
      "name": "turnSpeed",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "turnSpeed",
      "mode": "in",
      "options": {
        "uiMax": 5,
        "uiMin": 0.1
      },
      "persistence": true,
      "default": "0.8880000114440918"
    },
    {
      "name": "walkSpeed",
      "node": "DGNode",
      "graph": "05_painting",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "walkSpeed",
      "mode": "in",
      "options": {
        "uiMax": 5,
        "uiMin": 0.1
      },
      "persistence": true,
      "default": "2.730000019073486"
    }
  ]
}