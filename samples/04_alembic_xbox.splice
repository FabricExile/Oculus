{
  "version": "1013001",
  "info": {
    "hostAppName": "Splice Standalone",
    "hostAppVersion": "1.0"
  },
  "nodes": [
    {
      "name": "DGNode",
      "dependencies": {},
      "bindings": [
        {
          "operator": {
            "name": "alembicDrawOp",
            "entry": "alembicDrawOp",
            "filename": "alembicDrawOp.kl",
            "kl": "require Math;\nrequire InlineDrawing;\nrequire Geometry;\nrequire Oculus;\nrequire AlembicWrapper;\nrequire XBox;\n\noperator alembicDrawOp(Scalar turnSpeed, Scalar walkSpeed, in FilePath fileName, in Color background, in Boolean stereo, io ovrDevice or, io ovrViewportCallback oculusCallback, io XBoxViewportCallback xboxCallback, io DrawingHandle handle) {\n\n  if(!or.isConfigured()) {\n    or.configureTracking();\n    oculusCallback = ovrViewportCallback(or);\n    oculusCallback.registerForViewport();\n    xboxCallback = XBoxViewportCallback();\n    xboxCallback.registerForViewport();\n  }\n  \n  if(handle.isEmpty() && !fileName.isEmpty()) {\n  \n    AlembicArchiveReader archive(fileName.string());\n    String xfoPaths[] = archive.getPathsOfType('Xform');\n    String shapePaths[] = archive.getPathsOfType('PolyMesh');\n    \n    InlineShader shader = handle.getDrawing().registerShader(OGLWireFrameShader('wires', OGLSurfaceShader()));\n    \n    InlineTransform xfoLookup[String];\n    InlineShape shapeLookup[String];\n    InlineInstance instanceLookup[String];\n    \n    for(Size i=0;i<xfoPaths.size();i++) {\n      String xfoPath = xfoPaths[i];\n      String parts[] = xfoPath.reversePartition('/');\n\n      InlineTransform parentTransform = handle.getRootTransform();\n      if(parts[0] != \"\")\n        parentTransform = xfoLookup[parts[0]];\n\n      AlembicXformReader reader = archive.getXform(xfoPath);\n      Xfo xfo = reader.readSample(0.0);        \n      InlineTransform transform = StaticInlineTransform(parts[2], parentTransform, xfo);\n      xfoLookup[xfoPath] = transform;\n    }\n    \n    for(Size i=0;i<shapePaths.size();i++) {\n      String shapePath = shapePaths[i];\n      String parts[] = shapePath.reversePartition('/');\n\n      AlembicPolyMeshReader reader = archive.getPolyMesh(shapePath);\n      \n      PolygonMesh mesh = PolygonMesh();\n      reader.readSample(0.0, mesh);\n      \n      InlineTransform transform = xfoLookup[parts[0]];\n      InlineMeshShape shape(parts[2], mesh);\n      InlineInstance instance = SimpleInlineInstance(parts[2], transform, shape);\n      \n      shapeLookup[shapePath] = shape;\n      instanceLookup[shapePath] = instance;\n    }\n\n    Color colors[String];\n\n    colors['House_RoofShape'] = Color(0.4, 0.4, 0.4);\n    colors['Island_2Shape'] = Color(0.35, 0.594, 0.21);\n    colors['Lamp_FresnelLensShape'] = Color(0.965, 1.0, 0.776);\n    colors['LightHouse_BaseShape'] = Color(0.4, 0.4, 0.4);\n    colors['OceanShape'] = Color(0.33, 0.44, 0.6);\n    colors['Tower_BodyShape'] = Color(0.8, 0.8, 0.8);\n    colors['Tower_metalShape'] = Color(0.25, 0.25, 0.25);\n    colors['boltsShape'] = Color(1.0, 1.0, 1.0);\n    colors['fenceShape'] = Color(0.26, 0.2, 0.15);\n    colors['house_framesShape'] = Color(0.69, 0.64, 0.57);\n    colors['house_glassShape'] = Color(1.0, 1.0, 1.0);\n    colors['house_wallsShape'] = Color(0.69, 0.65, 0.6);\n    colors['house_woodShape'] = Color(0.34, 0.29, 0.197);\n    colors['leavesShape'] = Color(0.11, 0.232, 0.016);\n    colors['polymshShape'] = Color(0.534, 0.066, 0.066);\n    colors['rocksShape'] = Color(0.216, 0.216, 0.216);\n    colors['signsShape'] = Color(0.9, 0.9,0.9);\n    colors['stemShape'] = Color(0.286, 0.203, 0.118);    \n    \n    \n    for(path in instanceLookup) {\n      InlineInstance instance = instanceLookup[path];\n      InlineEntity entity = instance;\n      \n      Color color = colors.get(entity.getName(), Color(0.6, 0.6, 0.6));\n      InlineMaterial mat = shader.getOrCreateMaterial(path);\n      mat.setUniform('u_diffuseColor', color);\n      mat.addInstance(instance);\n    }\n \n  }\n  \n  or.setStereoEnabled(stereo);\n  oculusCallback.bgColor = background;\n  xboxCallback.walkSpeed = walkSpeed;\n  xboxCallback.turnSpeed = turnSpeed;\n  xboxCallback.controller.update();\n  xboxCallback.requiresUpdate = false;\n\n  if(xboxCallback.controller.buttonTriggered(XBOX_BUTTON_A)) {\n    OGLWireFrameShader shader = handle.getDrawing().getShader('wires_OGLSurfaceShader');\n    if(shader)\n      shader.asLines = !shader.asLines;\n  }\n  \n}\n",
            "portmap": {}
          }
        }
      ]
    }
  ],
  "extensions": [
    "Oculus",
    "XBox"
  ],
  "ports": [
    {
      "name": "background",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "Color",
      "autoInitObjects": true,
      "member": "background",
      "mode": "io",
      "persistence": true,
      "default": "{\"r\":0.8235294222831726,\"g\":0.9450980424880981,\"b\":1,\"a\":0}"
    },
    {
      "name": "fileName",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "FilePath",
      "autoInitObjects": true,
      "member": "fileName",
      "mode": "in",
      "persistence": true
    },
    {
      "name": "handle",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "DrawingHandle",
      "autoInitObjects": true,
      "member": "handle",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "oculusCallback",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "ovrViewportCallback",
      "autoInitObjects": false,
      "member": "oculusCallback",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "or",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "ovrDevice",
      "autoInitObjects": true,
      "member": "or",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "result",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "Vec3",
      "autoInitObjects": true,
      "member": "result",
      "mode": "out",
      "persistence": true,
      "default": "{\"x\":0,\"y\":0,\"z\":0}"
    },
    {
      "name": "stereo",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "Boolean",
      "autoInitObjects": true,
      "member": "stereo",
      "mode": "in",
      "persistence": true,
      "default": "true"
    },
    {
      "name": "time",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "time",
      "mode": "in",
      "persistence": false
    },
    {
      "name": "turnSpeed",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "turnSpeed",
      "mode": "in",
      "options": {
        "uiMax": 5,
        "uiMin": 0.1
      },
      "persistence": true,
      "default": "0.8880000114440918"
    },
    {
      "name": "walkSpeed",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "walkSpeed",
      "mode": "in",
      "options": {
        "uiMax": 5,
        "uiMin": 0.1
      },
      "persistence": true,
      "default": "2.730000019073486"
    },
    {
      "name": "xboxCallback",
      "node": "DGNode",
      "graph": "04_alembic_xbox",
      "type": "XBoxViewportCallback",
      "autoInitObjects": false,
      "member": "xboxCallback",
      "mode": "io",
      "persistence": false
    }
  ]
}