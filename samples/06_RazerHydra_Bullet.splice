{"version":"1013001","info":{"hostAppName":"Splice Standalone","hostAppVersion":"1.0"},"nodes":[{"name":"DGNode","dependencies":{},"bindings":[{"operator":{"name":"bulletOp","entry":"bulletOp","filename":"bulletOp.kl","kl":"require Math;\nrequire InlineDrawing;\nrequire Geometry;\nrequire Oculus;\nrequire RazerHydra;\nrequire FileIO;\nrequire AlembicWrapper;\nrequire BulletHelpers;\nrequire Bullet;\n\nobject RunTimeData {\n\n  Float32 time;\n  RigidBodySimulation sim;\n  Xfo razorOffset;\n  Vec3 razorCenter;\n};\n\noperator bulletOp(\n  in Boolean stereo, \n  io ovrDevice or, \n  io ovrViewportCallback oculusCallback, \n  io RazerHydraViewportCallback razerCallback, \n  io DrawingHandle handle,\n  io InlineInstance hands[],\n  io Object runtimeData\n) {\n  // initialize runtime data\n  if(!runtimeData)\n    runtimeData = RunTimeData();\n  RunTimeData rtd = runtimeData;\n\n  // setup the rendering callbacks\n  if(!or.isConfigured()) {\n    or.configureTracking();\n    oculusCallback = ovrViewportCallback(or);\n    oculusCallback.registerForViewport();\n    razerCallback = RazerHydraViewportCallback();\n    razerCallback.registerForViewport();\n  }\n\n  if(hands.size() == 0) {\n    PolygonMesh cube();\n    cube.addCuboid(Xfo(), 1, 1, 1, true, true);\n    InlineMeshShape shape('cube', cube);\n    InlineShader shader = handle.getDrawing().registerShader(OGLSurfaceShader());\n    InlineMaterial mat = shader.getOrCreateMaterial('hands');\n    mat.setUniform('u_diffuseColor', Color(1.0, 1.0, 1.0));\n    for(Size i=0;i<2;i++) {\n      String name = 'hand'+i;\n      InlineTransform transform = StaticInlineTransform(name, handle.getRootTransform(), Xfo());\n      InlineInstance instance = SimpleInlineInstance(name, transform, shape);\n      instance.addMaterial(mat);\n      hands.push(instance);\n    }\n  }\n  \n  // apply the evental reset of the hands\n  Xfo baseXfo;\n  baseXfo.tr = oculusCallback.walkOffset;\n  baseXfo.ori.setFromAxisAndAngle(Vec3(0, 1, 0), HALF_PI);\n  baseXfo.ori = baseXfo.ori * oculusCallback.turnOffset;\n\n  if(razerCallback.controller.controls[0].buttons & SIXENSE_BUTTON_START && \n    razerCallback.controller.controls[1].buttons & SIXENSE_BUTTON_START) {\n  \n    Vec3 pos0 = razerCallback.controller.controls[0].pos;\n    Vec3 pos1 = razerCallback.controller.controls[1].pos;\n    rtd.razorCenter = (pos0 + pos1) * 0.5;\n    \n    rtd.razorOffset = baseXfo.inverse() * oculusCallback.worldXfo;\n    oculusCallback.device.recenterPose();\n  }\n\n  // perform the reprojection of the hands\n  Xfo handXfo[2];\n  for(Size i=0;i<hands.size();i++) {\n    Vec3 pos = razerCallback.controller.controls[i].pos;\n    pos -= rtd.razorCenter;\n    Quat ori = razerCallback.controller.controls[i].rot_quat;\n    Quat offsetOri;\n    offsetOri.setFromAxisAndAngle(Vec3(0, 1, 0), PI);\n\n    Xfo xfo;\n    xfo.tr = pos * 0.1;\n    xfo.ori = ori * offsetOri;\n    xfo.sc *= 0.5;\n    \n    handXfo[i] = baseXfo * rtd.razorOffset * xfo;\n  }\n  \n  // setup the simulation\n  if(rtd.sim == null) {\n  \n    rtd.sim = RigidBodySimulation();\n\n    ///create 512 (8x8x8) dynamic object\n    const Integer ARRAY_SIZE_X = 8;\n    const Integer ARRAY_SIZE_Y = 8;\n    const Integer ARRAY_SIZE_Z = 8;\n    ///scaling of the objects (0.1 = 20 centimeter boxes )\n    const Scalar SCALING = 1.0;\n    const Scalar START_POS_X = -8.0;\n    const Scalar START_POS_Y = -8.0;\n    const Scalar START_POS_Z = -3.0;\n\n    rtd.sim.initPhysics();\n    rtd.sim.createGround();\n\n    PolygonMesh cuboidMesh(); \n    cuboidMesh.addCuboid(Xfo(), 1 * 2.0, 1 * 2.0, 1 * 2.0, true, true);\n    PolygonMesh sphereMesh(); \n    sphereMesh.addSphere(Xfo(), 3.0, 12, true, true);\n\n    // Re-using the same collision is better for memory usage and performance\n    BulletBoxShape cuboidShape = BulletBoxShape(Vec3(SCALING*1,SCALING*1,SCALING*1));\n    BulletSphereShape sphereShape = BulletSphereShape(3.0);\n    \n    // create two passive rigid bodies for the hands\n    rtd.sim.addRigidBody(0.0, Xfo(), sphereShape, sphereMesh);\n    rtd.sim.addRigidBody(0.0, Xfo(), sphereShape, sphereMesh);\n\n    //create a few dynamic rigidbodies\n    // BulletCollisionShape colShape = BulletSphereShape(1.0);\n    /// Create Dynamic Objects\n    Scalar start_x = START_POS_X - Scalar(ARRAY_SIZE_X)/2.0;\n    Scalar start_y = START_POS_Y;\n    Scalar start_z = START_POS_Z - Scalar(ARRAY_SIZE_Z)/2.0;\n    for(Integer k=0; k<ARRAY_SIZE_Y; k++){\n      for(Integer i=0; i<ARRAY_SIZE_X; i++){\n        for(Integer j=0; j<ARRAY_SIZE_Z; j++){\n          Xfo xfo(Vec3(Scalar(2.0 * i + start_x), Scalar(20+2.0 * k + start_y), Scalar(2.0 * j + start_z)));\n          rtd.sim.addRigidBody(1.0, xfo, cuboidShape, cuboidMesh);\n        }\n      }\n    }\n    rtd.sim.setupDebugDrawing();\n  }\n  \n  // increase simulation time or reset the scene\n  if(razerCallback.controller.controls[1].buttons & SIXENSE_BUTTON_1) {\n    rtd.time = 0.0;\n  } else {\n    rtd.time += 1.0 / 48.0;\n  }\n  \n  // synchronize the hands\n  rtd.sim.rigidBodies[0].body.setWorldTransform(handXfo[0]);\n  rtd.sim.rigidBodies[1].body.setWorldTransform(handXfo[1]);\n  \n  // reset simulation or step\n  if(rtd.time <= 1.0) {\n    rtd.sim.resetSimulation();\n  } else {\n    rtd.sim.stepSimulation();\n  }\n  \n}\n","portmap":{}}}]}],"extensions":["Oculus","RazerHydra"],"ports":[{"name":"background","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"Color","autoInitObjects":true,"member":"background","mode":"io","persistence":true,"default":"{\"r\":1,\"g\":1,\"b\":1,\"a\":0}"},{"name":"fileName","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"FilePath","autoInitObjects":true,"member":"fileName","mode":"in","persistence":true},{"name":"handle","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"DrawingHandle","autoInitObjects":true,"member":"handle","mode":"io","persistence":false},{"name":"hands","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"InlineInstance[]","autoInitObjects":true,"member":"hands","mode":"in","persistence":false},{"name":"meshes","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"InlineInstance[]","autoInitObjects":true,"member":"meshes","mode":"in","persistence":false},{"name":"oculusCallback","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"ovrViewportCallback","autoInitObjects":false,"member":"oculusCallback","mode":"io","persistence":false},{"name":"or","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"ovrDevice","autoInitObjects":true,"member":"or","mode":"io","persistence":false},{"name":"razerCallback","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"RazerHydraViewportCallback","autoInitObjects":false,"member":"razerCallback","mode":"io","persistence":false},{"name":"result","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"Vec3","autoInitObjects":true,"member":"result","mode":"out","persistence":true,"default":"{\"x\":0,\"y\":0,\"z\":0}"},{"name":"runtimeData","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"Object","autoInitObjects":false,"member":"runtimeData","mode":"in","persistence":false},{"name":"stereo","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"Boolean","autoInitObjects":true,"member":"stereo","mode":"in","persistence":true,"default":"true"},{"name":"time","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"Scalar","autoInitObjects":true,"member":"time","mode":"in","persistence":false},{"name":"turnSpeed","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"Scalar","autoInitObjects":true,"member":"turnSpeed","mode":"in","options":{"uiMax":5,"uiMin":0.1},"persistence":true,"default":"0.8880000114440918"},{"name":"walkSpeed","node":"DGNode","graph":"06_RazerHydra_Bullet","type":"Scalar","autoInitObjects":true,"member":"walkSpeed","mode":"in","options":{"uiMax":5,"uiMin":0.1},"persistence":true,"default":"2.730000019073486"}]}