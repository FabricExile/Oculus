// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "Returns the predicted head pose in outHmdTrackingState and offset eye poses in outEyePoses.\nThis is a thread-safe function where caller should increment frameIndex with every frame\nand pass that index where applicable to functions called on the rendering thread.\nAssuming outEyePoses are used for rendering, it should be passed as a part of ovrLayerEyeFov.\nThe caller does not need to worry about applying HmdToEyeViewOffset to the returned outEyePoses variables.\nthe last time ovr_SubmitFrame was called.\novr_GetRenderDesc. For monoscopic rendering, use a vector that is the average\nof the two vectors for both eyes.\nthe \"App-to-Mid-Photon\" latency timer starts from. If a given ovrLayer\nprovides \"SensorSampleTimestamp\", that will override the value stored here.\n\n Supported by ovrDevice"
    },
  "title" : "GetEyePoses",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "ovrDevice"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "frameIndex",
      "execPortType" : "In",
      "typeSpec" : "UInt32"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "latencyMarker",
      "execPortType" : "In",
      "typeSpec" : "Boolean"
      },
    {
      "objectType" : "Port",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 255,\n  \"g\" : 242,\n  \"b\" : 0\n  }"
        },
      "nodePortType" : "Out",
      "name" : "hmdToEyeViewOffset",
      "execPortType" : "In",
      "typeSpec" : "Vec3[2]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "IO",
      "name" : "outEyePoses",
      "execPortType" : "IO",
      "typeSpec" : "ovrPose[2]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "IO",
      "name" : "outHmdTrackingState",
      "execPortType" : "IO",
      "typeSpec" : "ovrTrackingState"
      }
    ],
  "extDeps" : {
    "Oculus" : "*"
    },
  "presetGUID" : "F49E151B5E485E1C5ED5F494D34A348F",
  "code" : "require Oculus;

dfgEntry {
  this.getEyePoses(frameIndex, latencyMarker, hmdToEyeViewOffset, outEyePoses, outHmdTrackingState);
}
"
  }