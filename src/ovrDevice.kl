/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

object ovrDevice {
  /// internal
  Data handle;
  /// internal
  Boolean configured;
  Boolean stereoEnabled;
};

alias Integer ovrTrackingCap;
///  Supports orientation tracking (IMU).
const Integer ovrTrackingCap_Orientation = 0x0010;
///  Supports yaw drift correction via a magnetometer or other means.    
const Integer ovrTrackingCap_MagYawCorrection = 0x0020;
///  Supports positional tracking.    
const Integer ovrTrackingCap_Position = 0x0040;
///  Overrides the other flags. Indicates that the application
///  doesn't care about tracking settings. This is the internal
///  default before ovrDevice.configureTracking is called.
const Integer ovrTrackingCap_Idle = 0x0100;

///  The HMD is plugged in and detected by the system.
const Integer ovrHmdCap_Present = 0x0001;
///  The HMD and its sensor is available for ownership use. i.e. it is not already owned by another application.
const Integer ovrHmdCap_Available = 0x0002;
///  Set to 'true' if we captured ownership of this HMD.
const Integer ovrHmdCap_Captured = 0x0004;
/// (read only) Means the display driver is in compatibility mode.
const Integer ovrHmdCap_ExtendDesktop = 0x0008;
/// Disables mirroring of HMD output to the window. This may improve 
const Integer ovrHmdCap_NoMirrorToWindow = 0x2000;
/// Turns off HMD screen and output (only if 'ExtendDesktop' is off).
const Integer ovrHmdCap_DisplayOff = 0x0040;
///  HMD supports low persistence mode.
const Integer ovrHmdCap_LowPersistence = 0x0080;
///  Adjust prediction dynamically based on internally measured latency.
const Integer ovrHmdCap_DynamicPrediction = 0x0200;
const Integer ovrHmdCap_NoVSync = 0x1000;
/// These bits can be modified by ovrHmd_SetEnabledCaps.
const Integer ovrHmdCap_Writable_Mask = 0x33F0;
/// These flags are currently passed into the service. May change without notice.
const Integer ovrHmdCap_Service_Mask = 0x23F0;

/// Supports chromatic aberration correction.
const Integer ovrDistortionCap_Chromatic = 0x01;
/// Supports timewarp.
const Integer ovrDistortionCap_TimeWarp = 0x02;
/// Supports vignetting around the edges of the view.
const Integer ovrDistortionCap_Vignette = 0x08;
///  Do not save and restore the graphics state when rendering distortion.
const Integer ovrDistortionCap_NoRestore = 0x10;
///  Flip the vertical texture coordinate of input images.
const Integer ovrDistortionCap_FlipInput = 0x20;
///  Assume input images are in sRGB gamma-corrected color space.
const Integer ovrDistortionCap_SRGB = 0x40;
///  Overdrive brightness transitions to reduce artifacts on DK2+ displays
const Integer ovrDistortionCap_Overdrive = 0x80;
/// High-quality sampling of distortion buffer for anti-aliasing
const Integer ovrDistortionCap_HqDistortion = 0x100;
/// Use when profiling with timewarp to remove false positives
const Integer ovrDistortionCap_ProfileNoTimewarpSpinWaits = 0x10000;

/// constructor given a device index
function ovrDevice(Index index) {
  this.construct(index);
}

/// constructor using the first available device
function ovrDevice() {
  this.construct(0);
}

/// internal
function ovrDevice.construct!(Index index) = "ovrDevice_Construct";

/// returns true if this device is valud
function Boolean ovrDevice.valid() {
  Data NULL;
  return this.handle == NULL;
}

/// default destructor
function ~ovrDevice() = "ovrDevice_Destruct";

/// returns the number of available devices
function Size ovrDevice.numDevices() = "ovrDevice_NumDevices";

/// returns the full description of this device
function ovrDescription ovrDevice.getDescription() = "ovrDevice_GetDescription";

/// Returns global, absolute high-resolution time in seconds. This is the same
/// value as used in sensor messages.
function Float64 ovrDevice.getTimeInSeconds() = "ovrDevice_GetTimeInSeconds";

/// Waits until the specified absolute time.
function ovrDevice.waitTillTime!(Float64 absTime) = "ovrDevice_WaitTillTime";

/// returns true if this device is enabled for stereo rendering
function Boolean ovrDevice.isStereoEnabled() {
  return this.stereoEnabled;
}

/// enables or disables stereo rendering
function ovrDevice.setStereEnabled!(Boolean enable) {
  this.stereoEnabled = enable;
}

/// returns true if this device has been configured for tracking yet
function Boolean ovrDevice.isConfigured() {
  return this.configured; 
}

/// All tracking interface functions are thread-safe, allowing tracking state to be sampled
/// from different threads.
/// ConfigureTracking starts sensor sampling, enabling specified capabilities,
///    described by ovrTrackingCaps.
///  - supportedTrackingCaps specifies support that is requested. The function will succeed 
///   even if these caps are not available (i.e. sensor or camera is unplugged). Support
///    will automatically be enabled if such device is plugged in later. Software should
///    check ORTrackingState.StatusFlags for real-time status.
///  - requiredTrackingCaps specify sensor capabilities required at the time of the call.
///    If they are not available, the function will fail. Pass 0 if only specifying
///    supportedTrackingCaps.
///  - Pass 0 for both supportedTrackingCaps and requiredTrackingCaps to disable tracking.
function Boolean ovrDevice.configureTracking!(ovrTrackingCap supportedTrackingCaps, ovrTrackingCap requiredTrackingCaps) = "ovrDevice_ConfigureTracking";

/// simple overload for configureTracking with a default setup of capabilities (and anything they might add in the future)
function Boolean ovrDevice.configureTracking!() {
  return this.configureTracking(0xffffffff, 0);
}

/// Platform specific function to specify the application window whose output will be 
/// displayed on the HMD. Only used if the ovrHmdCap_ExtendDesktop flag is false.
///   Windows: SwapChain associated with this window will be displayed on the HMD.
///            Specify 'destMirrorRect' in window coordinates to indicate an area
///            of the render target output that will be mirrored from 'sourceRenderTargetRect'.
///            Null pointers mean "full size".
/// @note Source and dest mirror rects are not yet implemented.
function Boolean ovrDevice.attachToWindow(UInt64 window) = "ovrDevice_AttachToWindow";

/// Returns tracking state reading based on the specified absolute system time.
/// Pass an absTime value of 0.0 to request the most recent sensor reading. In this case
/// both PredictedPose and SamplePose will have the same value.
/// ovrDevice.getEyePoses relies on this internally.
/// This may also be used for more refined timing of FrontBuffer rendering logic, etc.
function ovrTrackingState ovrDevice.getTrackingState(Float64 absTime) = "ovrDevice_GetTrackingState";

/// simple overload for getTrackingState using the device's current time
function ovrTrackingState ovrDevice.getTrackingState() {
  return this.getTrackingState(this.getTimeInSeconds());
}

/// Re-centers the sensor orientation.
/// Normally this will recenter the (x,y,z) translational components and the yaw 
/// component of orientation.
function ovrDevice.recenterPose!() = "ovrDevice_RecenterPose";

/// Returns last error for HMD state. Returns empty string for no error.
function String ovrDevice.getLastError() = "ovrDevice_GetLastError";

/// Returns capability bits that are enabled at this time as described by ovrHmdCaps.
/// Note that this value is different font ovrHmdDesc::HmdCaps, which describes what
/// capabilities are available for that HMD.
function UInt32 ovrDevice.getEnabledCaps() = "ovrDevice_GetEnabledCaps";

/// Modifies capability bits described by ovrHmdCaps that can be modified,
/// such as ovrDevice.LowPersistance.
function ovrDevice.setEnabledCaps(UInt32 hmdCaps) = "ovrDevice_SetEnabledCaps";

/// Configures rendering and fills in computed render parameters.
/// This function can be called multiple times to change rendering settings.
/// eyeRenderDescOut is a pointer to an array of two ovrEyeRenderDesc structs
/// that are used to return complete rendering information for each eye.
///
///  - apiConfig provides OpenGL specific parameters. Pass null
///    to shutdown rendering and release all resources.
///  - distortionCaps describe desired distortion settings.
///
function Boolean ovrDevice.configureRendering!(ovrGLConfig config, Integer distortionCaps, ovrFovPort eyeFovIn[2], ovrEyeRenderDesc eyeRenderDescOut[2] ) = "ovrDevice_ConfigureRendering";

/// disable SDK based rendering
function Boolean ovrDevice.disableRendering!() = "ovrDevice_DisableRendering";

/// get the recommended texture size for both eyes
function ovrSize ovrDevice.getFovTextureSize(ovrEyeType eye) = "ovrDevice_getFovTextureSize";

/// Begins a frame, returning timing information.
/// This should be called at the beginning of the game rendering loop (on the render thread).
/// Pass 0 for the frame index if not using ovrDevice.getFrameTiming.
function ovrFrameTiming ovrDevice.beginFrame!(Size frameIndex) = "ovrDevice_BeginFrame";

/// Ends a frame, submitting the rendered textures to the frame buffer.
/// - RenderViewport within each eyeTexture can change per frame if necessary.
/// - 'renderPose' will typically be the value returned from ovrDevice.getEyePoses, 
///   but can be different if a different head pose was used for rendering.
/// - This may perform distortion and scaling internally, assuming is it not 
///   delegated to another thread. 
/// - Must be called on the same thread as BeginFrame.
/// - *** This Function will call Present/SwapBuffers and potentially wait for GPU Sync ***.
function ovrDevice.endFrame!(ovrPose renderPose[2], ovrGLTexture eyeTexture[2]) = "ovrDevice_EndFrame";

/// Returns the predicted head pose to use when rendering the specified eye.
/// - Must be called between ovrDevice.beginFrameTiming and ovrDevice.endFrameTiming.
/// - If the pose is used for rendering the eye, it should be passed to ovrDevice.endFrame.
function ovrPose[2] ovrDevice.getEyePoses() = "ovrDevice_GetEyePoses";

/// Thread-safe timing function for the main thread. Caller should increment frameIndex
/// with every frame and pass the index where applicable to functions called on the 
/// rendering thread.
function ovrFrameTiming ovrDevice.getFrameTiming(Size frameIndex) = "ovrDevice_GetFrameTiming";

/// Called at the beginning of the frame on the rendering thread.
/// Pass frameIndex == 0 if ovrDevice.getFrameTiming isn't being used. Otherwise,
/// pass the same frame index as was used for GetFrameTiming on the main thread.
function ovrFrameTiming ovrDevice.beginFrameTiming(Size frameIndex) = "ovrDevice_BeginFrameTiming";

/// Marks the end of client distortion rendered frame, tracking the necessary timing information.
/// This function must be called immediately after Present/SwapBuffers + GPU sync. GPU sync is
/// important before this call to reduce latency and ensure proper timing.
function ovrDevice.endFrameTiming!() = "ovrDevice_EndFrameTiming";

/// Initializes and resets frame time tracking. This is typically not necessary, but
/// is helpful if game changes vsync state or video mode. vsync is assumed to be on if this
/// isn't called. Resets internal frame index to the specified number.
function ovrDevice.resetFrameTiming(Size frameIndex) = "ovrDevice_ResetFrameTiming";

/// Normally if an application uses SDK-based distortion rendering 
/// (ovrDevice.BeginFrame / ovrDevice.EndFrame) then the SDK also takes care of 
/// drawing the health and safety warning. If an application is using 
/// SDK-based rendering but wants to draw the warning display itself, 
/// it call this function with enabled set to false.
function ovrDevice.enableHSWDisplaySDKRender(Boolean enabled) = "ovrDevice_EnableHSWDisplaySDKRender";

/// Returns the projection for a given eye
function Mat44 ovrDevice.getProjection(ovrEyeType eye, Float32 znear, Float32 zfar, Boolean rightHanded) = "ovrDevice_getProjection";