#
# Copyright 2010-2014 Fabric Software Inc. All rights reserved.
#
import platform, json, os, shutil
Import('parentEnv', 'kl2edk', 'kl', 'extSuffix', 'STAGE_DIR')

extName = 'Oculus'

env = parentEnv.Clone()
env.Append(CPPPATH = [env.Dir('.').abspath])
env.Append(LIBS = ['libovr'])
env.Append(LIBS = ['libboost_thread-vc100-mt-s-1_55'])
env.Append(CCFLAGS = ['/EHsc'])

env.Append(LIBS = [
  'ws2_32.lib',
  'opengl32.lib',
  'Dbghelp.lib',
  'winmm.lib',
  'kernel32.lib',
  'user32.lib',
  'gdi32.lib',
  'winspool.lib',
  'comdlg32.lib',
  'advapi32.lib',
  'shell32.lib',
  'ole32.lib',
  'oleaut32.lib',
  'uuid.lib',
  'odbc32.lib',
  'odbccp32.lib'
])

sources = [
  env.File('Oculus.fpm.json')
]
sources += env.Glob('*.kl')

env.VariantDir(
  env.Dir('LibOVRKernel').Dir('src').Dir('Kernel'), 
  os.path.join(os.environ['OCULUS_DIR'], 'LibOVRKernel', 'src', 'Kernel')
)
env.VariantDir(
  env.Dir('LibOVRKernel').Dir('src').Dir('Util'), 
  os.path.join(os.environ['OCULUS_DIR'], 'LibOVRKernel', 'src', 'Util')
)

# directly link against the Oculus source files from lib kernel
cppFiles = env.Glob(os.path.join(env.Dir('LibOVRKernel').Dir('src').Dir('Kernel').abspath, '*.cpp'))
cppFiles += [env.Dir('LibOVRKernel').Dir('src').Dir('Util').File('Util_SystemGUI.cpp')]

cppFiles += [
  env.File('conversion.cpp'),
  env.File('ovrDevice_functions.cpp')
]

headers = [
  env.File('Oculus.h')
]

extData = json.loads(open(sources[0].srcnode().abspath, 'r').read())
extVersion = extData['version']

extStageDir = STAGE_DIR.Dir('Exts').Dir(extName)
presetStageDir = STAGE_DIR.Dir('Presets').Dir('DFG').Dir('ThirdParty').Dir(extName)
extensionFiles = env.Install(extStageDir, [env.File(extName+'.fpm.json')] + env.Glob('*.kl'))
kl2dfgLogFile = presetStageDir.File('kl2dfg.log')
kl2edkResults = env.RunKL2EDK(headers, sources)
kl2dfgResults = env.RunKL2DFG([kl2dfgLogFile], extensionFiles)

extLibFileName = env.File(extName + '-' + extSuffix)
libraryFiles = Flatten([env.SharedLibrary(extLibFileName, cppFiles)])
env.Depends(cppFiles, kl2edkResults)

extensionFiles += env.Install(extStageDir, libraryFiles[0])
extensionFiles = Flatten(extensionFiles)

if os.environ.has_key('FABRIC_EXTS_INSTALL_DIR'):
  INSTALL_DIR = os.environ['FABRIC_EXTS_INSTALL_DIR']
  INSTALL_DIR = os.path.normpath(os.path.join(INSTALL_DIR, extName, extVersion))

  newExtensionFiles = []
  for sourceFile in extensionFiles:
    relPath = os.path.relpath(sourceFile.abspath, STAGE_DIR.abspath)
    targetPath = os.path.join(INSTALL_DIR, relPath)
    targetFile = env.File(targetPath)
    newExtensionFiles += env.Install(targetFile.dir, sourceFile)
  extensionFiles += Flatten(newExtensionFiles)

env.AlwaysBuild(extensionFiles)
alias = env.Alias(extName, extensionFiles)

Return('alias')
