/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

require InlineDrawing:">1.0.0";
require Singletons;

object ovrViewportCallback : ViewportCallback {
  ovrDevice device;
  ovrDescription desc;
  Color bgColor;
  ovrGLTextureBuffer tBuffers[];
  ovrGLDepthBuffer dBuffers[];
  ovrGLMirrorTexture mirror;
  ovrSize eyeRes[2];
  ovrEyeRenderDesc eye_rdesc[2];
  ovrPose poses[2];
  ovrTrackingState trackingState;
  ovrViewScaleDesc viewScaleDesc;
  ovrLayerEyeFov layerEyeFov;
  Float32 poseScale;
  Xfo worldXfo;
  Xfo worldOffsetXfo;
  Boolean requiresSetup;
  Boolean enabled;
  Xfo prevCamXfo;
  Float32 prevCamFocalDistance;
};

/// \dfgPresetOmit
function ovrViewportCallback() {
  this.init(null);
}

function ovrViewportCallback(ovrDevice device) {
  this.init(device);
}

function ovrViewportCallback.setEnabled!(Boolean enabled)
{
  this.enabled = enabled;
}

/// \dfgPresetOmit
function ovrViewportCallback.init!(ovrDevice device) {
  this.device = device;
  if(device) {
    this.desc = device.getDescription();
    this.eye_rdesc[ovrEye_Left] = device.getRenderDesc(ovrEye_Left, this.desc.DefaultEyeFov[ovrEye_Left]);
    this.eye_rdesc[ovrEye_Right] = device.getRenderDesc(ovrEye_Right, this.desc.DefaultEyeFov[ovrEye_Right]);
    this.requiresSetup = true;
    this.enabled = true;
  }
  else
  {
    this.requiresSetup = false;
    this.enabled = false;
  }
  this.bgColor = Color(0.2, 0.2, 0.2, 1.0);
  this.poseScale = 10.0;
}

/// \dfgPresetOmit
function ovrViewportCallback.registerForViewport!(String viewportName) {
  InlineDrawing drawing = Singleton_get('InlineDrawing');
  Viewport viewport = drawing.getViewport(viewportName);
  if(viewport) {
    viewport.registerCallback(ViewportDrawPhase_Setup, this);
    viewport.registerCallback(ViewportDrawPhase_Resize, this);
    viewport.registerCallback(ViewportDrawPhase_PreDraw, this);
    viewport.registerCallback(ViewportDrawPhase_Draw, this);
    viewport.registerCallback(ViewportDrawPhase_PostDraw, this);
  } else {
    report('ovrViewportCallback::registerForViewport: viewport "'+viewportName+'" not found!');
  }
}

function ovrViewportCallback.registerForViewport!() {
  InlineDrawingBase drawing = Singleton_get('InlineDrawing');
  for(key in drawing.viewports) {
    this.registerForViewport(key);
    break;
  }
}

/// \dfgPresetOmit
function Boolean ovrViewportCallback.invoke!(ViewportDrawPhase phase, io Viewport viewport, io DrawContext context) {

  OGLStandaloneViewport vp = viewport;
  if(!vp) {
    setError('The viewport has to be a OGLStandaloneViewport, since we need access to the windowId.');
    return false;
  }

  InlineCamera camera = vp.getCamera();
  if(!this.enabled)
  {
    glClearColor(this.bgColor.r, this.bgColor.g, this.bgColor.b, this.bgColor.a);
    if(!camera.projection.isNull())
    {
      camera.xfo = this.prevCamXfo;
      camera.focalDistance = this.prevCamFocalDistance;
      camera.projection.setNull();
    }
    else
    {
      this.prevCamXfo = camera.xfo;
      this.prevCamFocalDistance = camera.focalDistance;
    }

    return false;
  }
  else
  {
    if(camera.projection.isNull())
    {
      this.prevCamXfo = camera.xfo;
      this.prevCamFocalDistance = camera.focalDistance;
    }
  }

  if(this.requiresSetup || 
    vp.dimensions.x != this.mirror.getSize().w ||
    vp.dimensions.y != this.mirror.getSize().h
  ) {

    if(this.tBuffers.size() == 0)
    {
      this.tBuffers.resize(2);
      this.dBuffers.resize(2);

      for(ovrEyeType eye=0; eye<ovrEye_Count; eye++) {

        this.eyeRes[eye] = this.device.getFovTextureSize(eye, this.desc.DefaultEyeFov[eye], 1);
        this.tBuffers[eye] = ovrGLTextureBuffer(this.device, true, true, this.eyeRes[eye], 1, 1);
        this.dBuffers[eye] = ovrGLDepthBuffer(this.tBuffers[eye].getSize(), 0);

      }
    }

    this.viewScaleDesc.HmdSpaceToWorldScaleInMeters = 1.0f;
    this.viewScaleDesc.HmdToEyeViewOffset[ovrEye_Left] = this.eye_rdesc[ovrEye_Left].HmdToEyeViewOffset;
    this.viewScaleDesc.HmdToEyeViewOffset[ovrEye_Right] = this.eye_rdesc[ovrEye_Right].HmdToEyeViewOffset;

    this.layerEyeFov.Header.Type  = ovrLayerType_EyeFov;
    this.layerEyeFov.Header.Flags = ovrLayerFlag_TextureOriginAtBottomLeft;   // Because OpenGL.

    for(ovrEyeType eye=0; eye<ovrEye_Count; eye++) {
      this.layerEyeFov.ColorTexture[eye] = this.tBuffers[eye];
      this.layerEyeFov.Viewport[eye]     = this.eyeRes[eye];
      this.layerEyeFov.Fov[eye]          = this.desc.DefaultEyeFov[eye];
    }

    ovrSize windowSize(vp.dimensions.x, vp.dimensions.y);
    this.mirror = ovrGLMirrorTexture(this.device, windowSize);

    glEnable(GL_DEPTH_TEST);
    glClearColor(this.bgColor.r, this.bgColor.g, this.bgColor.b, this.bgColor.a);

    this.requiresSetup = false;
  }

  switch(phase) {
    case ViewportDrawPhase_Draw: {

      if(this.tBuffers.size() == 0)
        return false;

      InlineDrawing drawing = OGLInlineDrawing_GetInstance();

      Vec3 viewOffset[2];
      viewOffset[ovrEye_Left] = this.eye_rdesc[ovrEye_Left].HmdToEyeViewOffset;
      viewOffset[ovrEye_Right] = this.eye_rdesc[ovrEye_Right].HmdToEyeViewOffset;

      ovrFrameTiming ftiming = this.device.getFrameTiming(0);
      this.trackingState = this.device.getTrackingState(ftiming.DisplayMidpointSeconds);
      this.poses = this.device.calcEyePoses(this.trackingState.HeadPose.ThePose, viewOffset);

      /* for each eye ... */
      for(ovrEyeType eye=0; eye<ovrEye_Count; eye++) {

        glClearColor(this.bgColor.r, this.bgColor.g, this.bgColor.b, this.bgColor.a);

        if(this.device.isStereoEnabled()) {

          // Switch to eye render target
          this.tBuffers[eye].setAndClearRenderSurface(this.dBuffers[eye]);

        }

        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();

        glLoadIdentity();

        Xfo camXfo;

        camXfo.ori = this.poses[eye].Orientation;
        camXfo.tr = this.poses[eye].Position * this.poseScale;
        camXfo = this.worldOffsetXfo * camXfo;

        if(eye == ovrEye_Left)
          this.worldXfo = camXfo;
        
        camera.xfo = camXfo;
        if(this.device.isStereoEnabled())
          camera.projection = this.device.getProjectionMat44(this.desc.DefaultEyeFov[eye], camera.nearDistance, camera.farDistance, ovrProjection_RightHanded);
        else
          camera.projection.setNull();

        /* finally draw the scene for this eye */
        drawing.draw(context);

        if(this.device.isStereoEnabled())
          this.tBuffers[eye].unsetRenderSurface();
        else
          break;
      }
      
      return true;

    }
    case ViewportDrawPhase_PostDraw: {

      if(this.tBuffers.size() == 0)
        return false;

      vp.responsibleForSwappingBuffers = this.device.isStereoEnabled();
      if(!vp.responsibleForSwappingBuffers)
        return false;

      glViewport(0, 0, vp.dimensions.x, vp.dimensions.y);
      glClearColor(this.bgColor.r, this.bgColor.g, this.bgColor.b, this.bgColor.a);
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

      for(ovrEyeType eye=0; eye<ovrEye_Count; eye++) {
        this.layerEyeFov.RenderPose[eye]   = this.poses[eye];
      }

      this.device.submitFrame(0, this.viewScaleDesc, this.layerEyeFov);

      this.mirror.blitTexture();

      return true;

    }
  }
  return false;
}

/// \dfgPresetDefault color {"r": 0.2, "g": 0.2, "b": 0.2, "a": 1.0}
function ovrViewportCallback.setBackgroundColor!(Color color) {
  this.bgColor = color;
}

/// \dfgPresetDefault scale 10.0
function ovrViewportCallback.setScale!(Scalar scale) {
  this.poseScale = scale;
}

function ovrTrackingState ovrViewportCallback.getTrackingState() {
  return this.trackingState;
}

function Xfo ovrViewportCallback.getWorldXfo() {
  return this.worldXfo;
}

function Xfo ovrViewportCallback.getWorldOffsetXfo() {
  return this.worldOffsetXfo;
}

function ovrViewportCallback.setWorldOffsetXfo!(Xfo xfo) {
  this.worldOffsetXfo = xfo;
}

/// \dfgPresetDefault scale 1.0
function Xfo ovrViewportCallback.getHeadXfo(Float32 scale) {
  return this.trackingState.HeadPose.getPoseAsXfo(scale);
}

/// \dfgPresetDefault scale 1.0
function Xfo ovrViewportCallback.getCameraXfo(Float32 scale) {
  return this.trackingState.CameraPose.getPoseAsXfo(scale);
}

/// \dfgPresetDefault scale 1.0
function Xfo ovrViewportCallback.getEyeXfo(ovrEyeType eye, Float32 scale) {
  return this.poses[eye].getPoseAsXfo(scale);
}
